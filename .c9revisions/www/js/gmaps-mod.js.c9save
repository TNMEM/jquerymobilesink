{"ts":1375536995638,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n * GMaps.js v0.4.4\n * http://hpneo.github.com/gmaps/\n *\n * Copyright 2013, Gustavo Leon\n * Released under the MIT License.\n */\n\nif (window.google == undefined && window.google.maps == undefined) {\n  throw 'Google Maps API is required. Please register the following JavaScript library http://maps.google.com/maps/api/js?sensor=true.'\n}\n\nvar extend_object = function(obj, new_obj) {\n  var name;\n\n  if (obj === new_obj) {\n    return obj;\n  }\n\n  for (name in new_obj) {\n    obj[name] = new_obj[name];\n  }\n\n  return obj;\n};\n\nvar replace_object = function(obj, replace) {\n  var name;\n\n  if (obj === replace) {\n    return obj;\n  }\n\n  for (name in replace) {\n    if (obj[name] != undefined) {\n      obj[name] = replace[name];\n    }\n  }\n\n  return obj;\n};\n\nvar array_map = function(array, callback) {\n  var original_callback_params = Array.prototype.slice.call(arguments, 2),\n      array_return = [],\n      array_length = array.length,\n      i;\n\n  if (Array.prototype.map && array.map === Array.prototype.map) {\n    array_return = Array.prototype.map.call(array, function(item) {\n      callback_params = original_callback_params;\n      callback_params.splice(0, 0, item);\n\n      return callback.apply(this, callback_params);\n    });\n  }\n  else {\n    for (i = 0; i < array_length; i++) {\n      callback_params = original_callback_params;\n      callback_params = callback_params.splice(0, 0, array[i]);\n      array_return.push(callback.apply(this, callback_params));\n    }\n  }\n\n  return array_return;\n};\n\nvar array_flat = function(array) {\n  var new_array = [],\n      i;\n\n  for (i = 0; i < array.length; i++) {\n    new_array = new_array.concat(array[i]);\n  }\n\n  return new_array;\n};\n\nvar coordsToLatLngs = function(coords, useGeoJSON) {\n  var first_coord = coords[0],\n      second_coord = coords[1];\n\n  if (useGeoJSON) {\n    first_coord = coords[1];\n    second_coord = coords[0];\n  }\n\n  return new google.maps.LatLng(first_coord, second_coord);\n};\n\nvar arrayToLatLng = function(coords, useGeoJSON) {\n  var i;\n\n  for (i = 0; i < coords.length; i++) {\n    if (coords[i].length > 0 && typeof(coords[i][0]) != \"number\") {\n      coords[i] = arrayToLatLng(coords[i], useGeoJSON);\n    }\n    else {\n      coords[i] = coordsToLatLngs(coords[i], useGeoJSON);\n    }\n  }\n\n  return coords;\n};\n\nvar getElementById = function(id, context) {\n  var element,\n  id = id.replace('#', '');\n\n  if ('jQuery' in this && context) {\n    element = $(\"#\" + id, context)[0];\n  } else {\n    element = document.getElementById(id);\n  };\n\n  return element;\n};\n\nvar findAbsolutePosition = function(obj)  {\n  var curleft = 0,\n      curtop = 0;\n\n  if (obj.offsetParent) {\n    do {\n      curleft += obj.offsetLeft;\n      curtop += obj.offsetTop;\n    } while (obj = obj.offsetParent);\n  }\n\n  return [curleft, curtop];\n};\n\nvar GMaps = (function(global) {\n  \"use strict\";\n\n  var doc = document;\n\n  var GMaps = function(options) {\n    options.zoom = options.zoom || 15;\n    options.mapType = options.mapType || 'roadmap';\n\n    var self = this,\n        i,\n        events_that_hide_context_menu = ['bounds_changed', 'center_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'idle', 'maptypeid_changed', 'projection_changed', 'resize', 'tilesloaded', 'zoom_changed'],\n        events_that_doesnt_hide_context_menu = ['mousemove', 'mouseout', 'mouseover'],\n        options_to_be_deleted = ['el', 'lat', 'lng', 'mapType', 'width', 'height', 'markerClusterer', 'enableNewStyle'],\n        container_id = options.el || options.div,\n        markerClustererFunction = options.markerClusterer,\n        mapType = google.maps.MapTypeId[options.mapType.toUpperCase()],\n        map_center = new google.maps.LatLng(options.lat, options.lng),\n        zoomControl = options.zoomControl || true,\n        zoomControlOpt = options.zoomControlOpt || {\n          style: 'DEFAULT',\n          position: 'TOP_LEFT'\n        },\n        zoomControlStyle = zoomControlOpt.style || 'DEFAULT',\n        zoomControlPosition = zoomControlOpt.position || 'TOP_LEFT',\n        panControl = options.panControl || true,\n        mapTypeControl = options.mapTypeControl || true,\n        scaleControl = options.scaleControl || true,\n        streetViewControl = options.streetViewControl || true,\n        overviewMapControl = overviewMapControl || true,\n        map_options = {},\n        map_base_options = {\n          zoom: this.zoom,\n          center: map_center,\n          mapTypeId: mapType\n        },\n        map_controls_options = {\n          panControl: panControl,\n          zoomControl: zoomControl,\n          zoomControlOptions: {\n            style: google.maps.ZoomControlStyle[zoomControlStyle],\n            position: google.maps.ControlPosition[zoomControlPosition]\n          },\n          mapTypeControl: mapTypeControl,\n          scaleControl: scaleControl,\n          streetViewControl: streetViewControl,\n          overviewMapControl: overviewMapControl\n        };\n\n    if (typeof(options.el) === 'string' || typeof(options.div) === 'string') {\n      this.el = getElementById(container_id, options.context);\n    } else {\n      this.el = container_id;\n    }\n\n    if (typeof(this.el) === 'undefined' || this.el === null) {\n      throw 'No element defined.';\n    }\n\n    window.context_menu = window.context_menu || {};\n    window.context_menu[self.el.id] = {};\n\n    this.controls = [];\n    this.overlays = [];\n    this.layers = []; // array with kml/georss and fusiontables layers, can be as many\n    this.singleLayers = {}; // object with the other layers, only one per layer\n    this.markers = [];\n    this.polylines = [];\n    this.routes = [];\n    this.polygons = [];\n    this.infoWindow = null;\n    this.overlay_el = null;\n    this.zoom = options.zoom;\n    this.registered_events = {};\n\n    this.el.style.width = options.width || this.el.scrollWidth || this.el.offsetWidth;\n    this.el.style.height = options.height || this.el.scrollHeight || this.el.offsetHeight;\n\n    google.maps.visualRefresh = options.enableNewStyle;\n\n    for (i = 0; i < options_to_be_deleted.length; i++) {\n      delete options[options_to_be_deleted[i]];\n    }\n\n    if(options.disableDefaultUI != true) {\n      map_base_options = extend_object(map_base_options, map_controls_options);\n    }\n\n    map_options = extend_object(map_base_options, options);\n\n    for (i = 0; i < events_that_hide_context_menu.length; i++) {\n      delete map_options[events_that_hide_context_menu[i]];\n    }\n\n    for (i = 0; i < events_that_doesnt_hide_context_menu.length; i++) {\n      delete map_options[events_that_doesnt_hide_context_menu[i]];\n    }\n\n    this.map = new google.maps.Map(this.el, map_options);\n\n    if (markerClustererFunction) {\n      this.markerClusterer = markerClustererFunction.apply(this, [this.map]);\n    }\n\n    var buildContextMenuHTML = function(control, e) {\n      var html = '',\n          options = window.context_menu[self.el.id][control];\n\n      for (var i in options){\n        if (options.hasOwnProperty(i)) {\n          var option = options[i];\n\n          html += '<li><a id=\"' + control + '_' + i + '\" href=\"#\">' + option.title + '</a></li>';\n        }\n      }\n\n      if (!getElementById('gmaps_context_menu')) return;\n\n      var context_menu_element = getElementById('gmaps_context_menu');\n      \n      context_menu_element.innerHTML = html;\n\n      var context_menu_items = context_menu_element.getElementsByTagName('a'),\n          context_menu_items_count = context_menu_items.length\n          i;\n\n      for (i = 0; i < context_menu_items_count; i++) {\n        var context_menu_item = context_menu_items[i];\n\n        var assign_menu_item_action = function(ev){\n          ev.preventDefault();\n\n          options[this.id.replace(control + '_', '')].action.apply(self, [e]);\n          self.hideContextMenu();\n        };\n\n        google.maps.event.clearListeners(context_menu_item, 'click');\n        google.maps.event.addDomListenerOnce(context_menu_item, 'click', assign_menu_item_action, false);\n      }\n\n      var position = findAbsolutePosition.apply(this, [self.el]),\n          left = position[0] + e.pixel.x - 15,\n          top = position[1] + e.pixel.y- 15;\n\n      context_menu_element.style.left = left + \"px\";\n      context_menu_element.style.top = top + \"px\";\n\n      context_menu_element.style.display = 'block';\n    };\n\n    this.buildContextMenu = function(control, e) {\n      if (control === 'marker') {\n        e.pixel = {};\n\n        var overlay = new google.maps.OverlayView();\n        overlay.setMap(self.map);\n        \n        overlay.draw = function() {\n          var projection = overlay.getProjection(),\n              position = e.marker.getPosition();\n          \n          e.pixel = projection.fromLatLngToContainerPixel(position);\n\n          buildContextMenuHTML(control, e);\n        };\n      }\n      else {\n        buildContextMenuHTML(control, e);\n      }\n    };\n\n    this.setContextMenu = function(options) {\n      window.context_menu[self.el.id][options.control] = {};\n\n      var i,\n          ul = doc.createElement('ul');\n\n      for (i in options.options) {\n        if (options.options.hasOwnProperty(i)) {\n          var option = options.options[i];\n\n          window.context_menu[self.el.id][options.control][option.name] = {\n            title: option.title,\n            action: option.action\n          };\n        }\n      }\n\n      ul.id = 'gmaps_context_menu';\n      ul.style.display = 'none';\n      ul.style.position = 'absolute';\n      ul.style.minWidth = '100px';\n      ul.style.background = 'white';\n      ul.style.listStyle = 'none';\n      ul.style.padding = '8px';\n      ul.style.boxShadow = '2px 2px 6px #ccc';\n\n      doc.body.appendChild(ul);\n\n      var context_menu_element = getElementById('gmaps_context_menu')\n\n      google.maps.event.addDomListener(context_menu_element, 'mouseout', function(ev) {\n        if (!ev.relatedTarget || !this.contains(ev.relatedTarget)) {\n          window.setTimeout(function(){\n            context_menu_element.style.display = 'none';\n          }, 400);\n        }\n      }, false);\n    };\n\n    this.hideContextMenu = function() {\n      var context_menu_element = getElementById('gmaps_context_menu');\n\n      if (context_menu_element) {\n        context_menu_element.style.display = 'none';\n      }\n    };\n\n    var setupListener = function(object, name) {\n      google.maps.event.addListener(object, name, function(e){\n        if (e == undefined) {\n          e = this;\n        }\n\n        options[name].apply(this, [e]);\n\n        self.hideContextMenu();\n      });\n    };\n\n    for (var ev = 0; ev < events_that_hide_context_menu.length; ev++) {\n      var name = events_that_hide_context_menu[ev];\n\n      if (name in options) {\n        setupListener(this.map, name);\n      }\n    }\n\n    for (var ev = 0; ev < events_that_doesnt_hide_context_menu.length; ev++) {\n      var name = events_that_doesnt_hide_context_menu[ev];\n\n      if (name in options) {\n        setupListener(this.map, name);\n      }\n    }\n\n    google.maps.event.addListener(this.map, 'rightclick', function(e) {\n      if (options.rightclick) {\n        options.rightclick.apply(this, [e]);\n      }\n\n      if(window.context_menu[self.el.id]['map'] != undefined) {\n        self.buildContextMenu('map', e);\n      }\n    });\n\n    this.refresh = function() {\n      google.maps.event.trigger(this.map, 'resize');\n    };\n\n    this.fitZoom = function() {\n      var latLngs = [],\n          markers_length = this.markers.length,\n          i;\n\n      for (i = 0; i < markers_length; i++) {\n        latLngs.push(this.markers[i].getPosition());\n      }\n\n      this.fitLatLngBounds(latLngs);\n    };\n\n    this.fitLatLngBounds = function(latLngs) {\n      var total = latLngs.length;\n      var bounds = new google.maps.LatLngBounds();\n\n      for(var i=0; i < total; i++) {\n        bounds.extend(latLngs[i]);\n      }\n\n      this.map.fitBounds(bounds);\n    };\n\n    this.setCenter = function(lat, lng, callback) {\n      this.map.panTo(new google.maps.LatLng(lat, lng));\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    this.getElement = function() {\n      return this.el;\n    };\n\n    this.zoomIn = function(value) {\n      value = value || 1;\n\n      this.zoom = this.map.getZoom() + value;\n      this.map.setZoom(this.zoom);\n    };\n\n    this.zoomOut = function(value) {\n      value = value || 1;\n\n      this.zoom = this.map.getZoom() - value;\n      this.map.setZoom(this.zoom);\n    };\n\n    var native_methods = [],\n        method;\n\n    for (method in this.map) {\n      if (typeof(this.map[method]) == 'function' && !this[method]) {\n        native_methods.push(method);\n      }\n    }\n\n    for (i=0; i < native_methods.length; i++) {\n      (function(gmaps, scope, method_name) {\n        gmaps[method_name] = function(){\n          return scope[method_name].apply(scope, arguments);\n        };\n      })(this, this.map, native_methods[i]);\n    }\n  };\n\n  return GMaps;\n})(this);\n\nGMaps.prototype.createControl = function(options) {\n  var control = document.createElement('div');\n\n  control.style.cursor = 'pointer';\n  control.style.fontFamily = 'Arial, sans-serif';\n  control.style.fontSize = '13px';\n  control.style.boxShadow = 'rgba(0, 0, 0, 0.398438) 0px 2px 4px';\n\n  for (var option in options.style) {\n    control.style[option] = options.style[option];\n  }\n\n  if (options.id) {\n    control.id = options.id;\n  }\n\n  if (options.classes) {\n    control.className = options.classes;\n  }\n\n  if (options.content) {\n    control.innerHTML = options.content;\n  }\n\n  for (var ev in options.events) {\n    (function(object, name) {\n      google.maps.event.addDomListener(object, name, function(){\n        options.events[name].apply(this, [this]);\n      });\n    })(control, ev);\n  }\n\n  control.index = 1;\n\n  return control;\n};\n\nGMaps.prototype.addControl = function(options) {\n  var position = google.maps.ControlPosition[options.position.toUpperCase()];\n\n  delete options.position;\n\n  var control = this.createControl(options);\n  this.controls.push(control);\n  \n  this.map.controls[position].push(control);\n\n  return control;\n};\n\nGMaps.prototype.createMarker = function(options) {\n  if (options.lat == undefined && options.lng == undefined && options.position == undefined) {\n    throw 'No latitude or longitude defined.';\n  }\n\n  var self = this,\n      details = options.details,\n      fences = options.fences,\n      outside = options.outside,\n      base_options = {\n        position: new google.maps.LatLng(options.lat, options.lng),\n        map: null\n      };\n\n  delete options.lat;\n  delete options.lng;\n  delete options.fences;\n  delete options.outside;\n\n  var marker_options = extend_object(base_options, options),\n      marker = new google.maps.Marker(marker_options);\n\n  marker.fences = fences;\n\n  if (options.infoWindow) {\n    marker.infoWindow = new google.maps.InfoWindow(options.infoWindow);\n\n    var info_window_events = ['closeclick', 'content_changed', 'domready', 'position_changed', 'zindex_changed'];\n\n    for (var ev = 0; ev < info_window_events.length; ev++) {\n      (function(object, name) {\n        if (options.infoWindow[name]) {\n          google.maps.event.addListener(object, name, function(e){\n            options.infoWindow[name].apply(this, [e]);\n          });\n        }\n      })(marker.infoWindow, info_window_events[ev]);\n    }\n  }\n\n  var marker_events = ['animation_changed', 'clickable_changed', 'cursor_changed', 'draggable_changed', 'flat_changed', 'icon_changed', 'position_changed', 'shadow_changed', 'shape_changed', 'title_changed', 'visible_changed', 'zindex_changed'];\n\n  var marker_events_with_mouse = ['dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mouseout', 'mouseover', 'mouseup'];\n\n  for (var ev = 0; ev < marker_events.length; ev++) {\n    (function(object, name) {\n      if (options[name]) {\n        google.maps.event.addListener(object, name, function(){\n          options[name].apply(this, [this]);\n        });\n      }\n    })(marker, marker_events[ev]);\n  }\n\n  for (var ev = 0; ev < marker_events_with_mouse.length; ev++) {\n    (function(map, object, name) {\n      if (options[name]) {\n        google.maps.event.addListener(object, name, function(me){\n          if(!me.pixel){\n            me.pixel = map.getProjection().fromLatLngToPoint(me.latLng)\n          }\n          \n          options[name].apply(this, [me]);\n        });\n      }\n    })(this.map, marker, marker_events_with_mouse[ev]);\n  }\n\n  google.maps.event.addListener(marker, 'click', function() {\n    this.details = details;\n\n    if (options.click) {\n      options.click.apply(this, [this]);\n    }\n\n    if (marker.infoWindow) {\n      self.hideInfoWindows();\n      marker.infoWindow.open(self.map, marker);\n    }\n  });\n\n  google.maps.event.addListener(marker, 'rightclick', function(e) {\n    e.marker = this;\n\n    if (options.rightclick) {\n      options.rightclick.apply(this, [e]);\n    }\n\n    if (window.context_menu[self.el.id]['marker'] != undefined) {\n      self.buildContextMenu('marker', e);\n    }\n  });\n\n  if (marker.fences) {\n    google.maps.event.addListener(marker, 'dragend', function() {\n      self.checkMarkerGeofence(marker, function(m, f) {\n        outside(m, f);\n      });\n    });\n  }\n\n  return marker;\n};\n\nGMaps.prototype.addMarker = function(options) {\n  var marker;\n  if(options.hasOwnProperty('gm_accessors_')) {\n    // Native google.maps.Marker object\n    marker = options;\n  }\n  else {\n    if ((options.hasOwnProperty('lat') && options.hasOwnProperty('lng')) || options.position) {\n      marker = this.createMarker(options);\n    }\n    else {\n      throw 'No latitude or longitude defined.';\n    }\n  }\n\n  marker.setMap(this.map);\n\n  if(this.markerClusterer) {\n    this.markerClusterer.addMarker(marker);\n  }\n\n  this.markers.push(marker);\n\n  GMaps.fire('marker_added', marker, this);\n\n  return marker;\n};\n\nGMaps.prototype.addMarkers = function(array) {\n  for (var i = 0, marker; marker=array[i]; i++) {\n    this.addMarker(marker);\n  }\n\n  return this.markers;\n};\n\nGMaps.prototype.hideInfoWindows = function() {\n  for (var i = 0, marker; marker = this.markers[i]; i++){\n    if (marker.infoWindow){\n      marker.infoWindow.close();\n    }\n  }\n};\n\nGMaps.prototype.removeMarker = function(marker) {\n  for (var i = 0; i < this.markers.length; i++) {\n    if (this.markers[i] === marker) {\n      this.markers[i].setMap(null);\n      this.markers.splice(i, 1);\n\n      GMaps.fire('marker_removed', marker, this);\n\n      break;\n    }\n  }\n\n  return marker;\n};\n\nGMaps.prototype.removeMarkers = function(collection) {\n  var collection = (collection || this.markers);\n\n  for (var i = 0;i < this.markers.length; i++) {\n    if(this.markers[i] === collection[i]) {\n      this.markers[i].setMap(null);\n    }\n  }\n\n  var new_markers = [];\n\n  for (var i = 0;i < this.markers.length; i++) {\n    if(this.markers[i].getMap() != null) {\n      new_markers.push(this.markers[i]);\n    }\n  }\n\n  this.markers = new_markers;\n};\n\nGMaps.prototype.drawOverlay = function(options) {\n  var overlay = new google.maps.OverlayView(),\n      auto_show = true;\n\n  overlay.setMap(this.map);\n\n  if (options.auto_show != null) {\n    auto_show = options.auto_show;\n  }\n\n  overlay.onAdd = function() {\n    var el = document.createElement('div');\n\n    el.style.borderStyle = \"none\";\n    el.style.borderWidth = \"0px\";\n    el.style.position = \"absolute\";\n    el.style.zIndex = 100;\n    el.innerHTML = options.content;\n\n    overlay.el = el;\n\n    if (!options.layer) {\n      options.layer = 'overlayLayer';\n    }\n    \n    var panes = this.getPanes(),\n        overlayLayer = panes[options.layer],\n        stop_overlay_events = ['contextmenu', 'DOMMouseScroll', 'dblclick', 'mousedown'];\n\n    overlayLayer.appendChild(el);\n\n    for (var ev = 0; ev < stop_overlay_events.length; ev++) {\n      (function(object, name) {\n        google.maps.event.addDomListener(object, name, function(e){\n          if (navigator.userAgent.toLowerCase().indexOf('msie') != -1 && document.all) {\n            e.cancelBubble = true;\n            e.returnValue = false;\n          }\n          else {\n            e.stopPropagation();\n          }\n        });\n      })(el, stop_overlay_events[ev]);\n    }\n\n    google.maps.event.trigger(this, 'ready');\n  };\n\n  overlay.draw = function() {\n    var projection = this.getProjection(),\n        pixel = projection.fromLatLngToDivPixel(new google.maps.LatLng(options.lat, options.lng));\n\n    options.horizontalOffset = options.horizontalOffset || 0;\n    options.verticalOffset = options.verticalOffset || 0;\n\n    var el = overlay.el,\n        content = el.children[0],\n        content_height = content.clientHeight,\n        content_width = content.clientWidth;\n\n    switch (options.verticalAlign) {\n      case 'top':\n        el.style.top = (pixel.y - content_height + options.verticalOffset) + 'px';\n        break;\n      default:\n      case 'middle':\n        el.style.top = (pixel.y - (content_height / 2) + options.verticalOffset) + 'px';\n        break;\n      case 'bottom':\n        el.style.top = (pixel.y + options.verticalOffset) + 'px';\n        break;\n    }\n\n    switch (options.horizontalAlign) {\n      case 'left':\n        el.style.left = (pixel.x - content_width + options.horizontalOffset) + 'px';\n        break;\n      default:\n      case 'center':\n        el.style.left = (pixel.x - (content_width / 2) + options.horizontalOffset) + 'px';\n        break;\n      case 'right':\n        el.style.left = (pixel.x + options.horizontalOffset) + 'px';\n        break;\n    }\n\n    el.style.display = auto_show ? 'block' : 'none';\n\n    if (!auto_show) {\n      options.show.apply(this, [el]);\n    }\n  };\n\n  overlay.onRemove = function() {\n    var el = overlay.el;\n\n    if (options.remove) {\n      options.remove.apply(this, [el]);\n    }\n    else {\n      overlay.el.parentNode.removeChild(overlay.el);\n      overlay.el = null;\n    }\n  };\n\n  this.overlays.push(overlay);\n  return overlay;\n};\n\nGMaps.prototype.removeOverlay = function(overlay) {\n  for (var i = 0; i < this.overlays.length; i++) {\n    if (this.overlays[i] === overlay) {\n      this.overlays[i].setMap(null);\n      this.overlays.splice(i, 1);\n\n      break;\n    }\n  }\n};\n\nGMaps.prototype.removeOverlays = function() {\n  for (var i = 0, item; item = this.overlays[i]; i++) {\n    item.setMap(null);\n  }\n\n  this.overlays = [];\n};\n\nGMaps.prototype.drawPolyline = function(options) {\n  var path = [],\n      points = options.path;\n\n  if (points.length) {\n    if (points[0][0] === undefined) {\n      path = points;\n    }\n    else {\n      for (var i=0, latlng; latlng=points[i]; i++) {\n        path.push(new google.maps.LatLng(latlng[0], latlng[1]));\n      }\n    }\n  }\n\n  var polyline_options = {\n    map: this.map,\n    path: path,\n    strokeColor: options.strokeColor,\n    strokeOpacity: options.strokeOpacity,\n    strokeWeight: options.strokeWeight,\n    geodesic: options.geodesic,\n    clickable: true,\n    editable: false,\n    visible: true\n  };\n\n  if (options.hasOwnProperty(\"clickable\")) {\n    polyline_options.clickable = options.clickable;\n  }\n\n  if (options.hasOwnProperty(\"editable\")) {\n    polyline_options.editable = options.editable;\n  }\n\n  if (options.hasOwnProperty(\"icons\")) {\n    polyline_options.icons = options.icons;\n  }\n\n  if (options.hasOwnProperty(\"zIndex\")) {\n    polyline_options.zIndex = options.zIndex;\n  }\n\n  var polyline = new google.maps.Polyline(polyline_options);\n\n  var polyline_events = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];\n\n  for (var ev = 0; ev < polyline_events.length; ev++) {\n    (function(object, name) {\n      if (options[name]) {\n        google.maps.event.addListener(object, name, function(e){\n          options[name].apply(this, [e]);\n        });\n      }\n    })(polyline, polyline_events[ev]);\n  }\n\n  this.polylines.push(polyline);\n\n  GMaps.fire('polyline_added', polyline, this);\n\n  return polyline;\n};\n\nGMaps.prototype.removePolyline = function(polyline) {\n  for (var i = 0; i < this.polylines.length; i++) {\n    if (this.polylines[i] === polyline) {\n      this.polylines[i].setMap(null);\n      this.polylines.splice(i, 1);\n\n      GMaps.fire('polyline_removed', polyline, this);\n\n      break;\n    }\n  }\n};\n\nGMaps.prototype.removePolylines = function() {\n  for (var i = 0, item; item = this.polylines[i]; i++) {\n    item.setMap(null);\n  }\n\n  this.polylines = [];\n};\n\nGMaps.prototype.drawCircle = function(options) {\n  options =  extend_object({\n    map: this.map,\n    center: new google.maps.LatLng(options.lat, options.lng)\n  }, options);\n\n  delete options.lat;\n  delete options.lng;\n\n  var polygon = new google.maps.Circle(options),\n      polygon_events = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];\n\n  for (var ev = 0; ev < polygon_events.length; ev++) {\n    (function(object, name) {\n      if (options[name]) {\n        google.maps.event.addListener(object, name, function(e){\n          options[name].apply(this, [e]);\n        });\n      }\n    })(polygon, polygon_events[ev]);\n  }\n\n  this.polygons.push(polygon);\n\n  return polygon;\n};\n\nGMaps.prototype.drawRectangle = function(options) {\n  options = extend_object({\n    map: this.map\n  }, options);\n\n  var latLngBounds = new google.maps.LatLngBounds(\n    new google.maps.LatLng(options.bounds[0][0], options.bounds[0][1]),\n    new google.maps.LatLng(options.bounds[1][0], options.bounds[1][1])\n  );\n\n  options.bounds = latLngBounds;\n\n  var polygon = new google.maps.Rectangle(options),\n      polygon_events = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];\n\n  for (var ev = 0; ev < polygon_events.length; ev++) {\n    (function(object, name) {\n      if (options[name]) {\n        google.maps.event.addListener(object, name, function(e){\n          options[name].apply(this, [e]);\n        });\n      }\n    })(polygon, polygon_events[ev]);\n  }\n\n  this.polygons.push(polygon);\n\n  return polygon;\n};\n\nGMaps.prototype.drawPolygon = function(options) {\n  var useGeoJSON = false;\n\n  if(options.hasOwnProperty(\"useGeoJSON\")) {\n    useGeoJSON = options.useGeoJSON;\n  }\n\n  delete options.useGeoJSON;\n\n  options = extend_object({\n    map: this.map\n  }, options);\n\n  if (useGeoJSON == false) {\n    options.paths = [options.paths.slice(0)];\n  }\n\n  if (options.paths.length > 0) {\n    if (options.paths[0].length > 0) {\n      options.paths = array_flat(array_map(options.paths, arrayToLatLng, useGeoJSON));\n    }\n  }\n\n  var polygon = new google.maps.Polygon(options),\n      polygon_events = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];\n\n  for (var ev = 0; ev < polygon_events.length; ev++) {\n    (function(object, name) {\n      if (options[name]) {\n        google.maps.event.addListener(object, name, function(e){\n          options[name].apply(this, [e]);\n        });\n      }\n    })(polygon, polygon_events[ev]);\n  }\n\n  this.polygons.push(polygon);\n\n  GMaps.fire('polygon_added', polygon, this);\n\n  return polygon;\n};\n\nGMaps.prototype.removePolygon = function(polygon) {\n  for (var i = 0; i < this.polygons.length; i++) {\n    if (this.polygons[i] === polygon) {\n      this.polygons[i].setMap(null);\n      this.polygons.splice(i, 1);\n\n      GMaps.fire('polygon_removed', polygon, this);\n\n      break;\n    }\n  }\n};\n\nGMaps.prototype.removePolygons = function() {\n  for (var i = 0, item; item = this.polygons[i]; i++) {\n    item.setMap(null);\n  }\n\n  this.polygons = [];\n};\n\nGMaps.prototype.getFromFusionTables = function(options) {\n  var events = options.events;\n\n  delete options.events;\n\n  var fusion_tables_options = options,\n      layer = new google.maps.FusionTablesLayer(fusion_tables_options);\n\n  for (var ev in events) {\n    (function(object, name) {\n      google.maps.event.addListener(object, name, function(e) {\n        events[name].apply(this, [e]);\n      });\n    })(layer, ev);\n  }\n\n  this.layers.push(layer);\n\n  return layer;\n};\n\nGMaps.prototype.loadFromFusionTables = function(options) {\n  var layer = this.getFromFusionTables(options);\n  layer.setMap(this.map);\n\n  return layer;\n};\n\nGMaps.prototype.getFromKML = function(options) {\n  var url = options.url,\n      events = options.events;\n\n  delete options.url;\n  delete options.events;\n\n  var kml_options = options,\n      layer = new google.maps.KmlLayer(url, kml_options);\n\n  for (var ev in events) {\n    (function(object, name) {\n      google.maps.event.addListener(object, name, function(e) {\n        events[name].apply(this, [e]);\n      });\n    })(layer, ev);\n  }\n\n  this.layers.push(layer);\n\n  return layer;\n};\n\nGMaps.prototype.loadFromKML = function(options) {\n  var layer = this.getFromKML(options);\n  layer.setMap(this.map);\n\n  return layer;\n};\n\nGMaps.prototype.addLayer = function(layerName, options) {\n  //var default_layers = ['weather', 'clouds', 'traffic', 'transit', 'bicycling', 'panoramio', 'places'];\n  options = options || {};\n  var layer;\n\n  switch(layerName) {\n    case 'weather': this.singleLayers.weather = layer = new google.maps.weather.WeatherLayer();\n      break;\n    case 'clouds': this.singleLayers.clouds = layer = new google.maps.weather.CloudLayer();\n      break;\n    case 'traffic': this.singleLayers.traffic = layer = new google.maps.TrafficLayer();\n      break;\n    case 'transit': this.singleLayers.transit = layer = new google.maps.TransitLayer();\n      break;\n    case 'bicycling': this.singleLayers.bicycling = layer = new google.maps.BicyclingLayer();\n      break;\n    case 'panoramio':\n        this.singleLayers.panoramio = layer = new google.maps.panoramio.PanoramioLayer();\n        layer.setTag(options.filter);\n        delete options.filter;\n\n        //click event\n        if (options.click) {\n          google.maps.event.addListener(layer, 'click', function(event) {\n            options.click(event);\n            delete options.click;\n          });\n        }\n      break;\n      case 'places':\n        this.singleLayers.places = layer = new google.maps.places.PlacesService(this.map);\n\n        //search and  nearbySearch callback, Both are the same\n        if (options.search || options.nearbySearch) {\n          var placeSearchRequest  = {\n            bounds : options.bounds || null,\n            keyword : options.keyword || null,\n            location : options.location || null,\n            name : options.name || null,\n            radius : options.radius || null,\n            rankBy : options.rankBy || null,\n            types : options.types || null\n          };\n\n          if (options.search) {\n            layer.search(placeSearchRequest, options.search);\n          }\n\n          if (options.nearbySearch) {\n            layer.nearbySearch(placeSearchRequest, options.nearbySearch);\n          }\n        }\n\n        //textSearch callback\n        if (options.textSearch) {\n          var textSearchRequest  = {\n            bounds : options.bounds || null,\n            location : options.location || null,\n            query : options.query || null,\n            radius : options.radius || null\n          };\n\n          layer.textSearch(textSearchRequest, options.textSearch);\n        }\n      break;\n  }\n\n  if (layer !== undefined) {\n    if (typeof layer.setOptions == 'function') {\n      layer.setOptions(options);\n    }\n    if (typeof layer.setMap == 'function') {\n      layer.setMap(this.map);\n    }\n\n    return layer;\n  }\n};\n\nGMaps.prototype.removeLayer = function(layer) {\n  if (typeof(layer) == \"string\" && this.singleLayers[layer] !== undefined) {\n     this.singleLayers[layer].setMap(null);\n\n     delete this.singleLayers[layer];\n  }\n  else {\n    for (var i = 0; i < this.layers.length; i++) {\n      if (this.layers[i] === layer) {\n        this.layers[i].setMap(null);\n        this.layers.splice(i, 1);\n\n        break;\n      }\n    }\n  }\n};\n\nvar travelMode, unitSystem;\n\nGMaps.prototype.getRoutes = function(options) {\n  switch (options.travelMode) {\n    case 'bicycling':\n      travelMode = google.maps.TravelMode.BICYCLING;\n      break;\n    case 'transit':\n      travelMode = google.maps.TravelMode.TRANSIT;\n      break;\n    case 'driving':\n      travelMode = google.maps.TravelMode.DRIVING;\n      break;\n    default:\n      travelMode = google.maps.TravelMode.WALKING;\n      break;\n  }\n\n  if (options.unitSystem === 'imperial') {\n    unitSystem = google.maps.UnitSystem.IMPERIAL;\n  }\n  else {\n    unitSystem = google.maps.UnitSystem.METRIC;\n  }\n\n  var base_options = {\n        avoidHighways: false,\n        avoidTolls: false,\n        optimizeWaypoints: false,\n        waypoints: []\n      },\n      request_options =  extend_object(base_options, options);\n\n  request_options.origin = /string/.test(typeof options.origin) ? options.origin : new google.maps.LatLng(options.origin[0], options.origin[1]);\n  request_options.destination = /string/.test(typeof options.destination) ? options.destination : new google.maps.LatLng(options.destination[0], options.destination[1]);\n  request_options.travelMode = travelMode;\n  request_options.unitSystem = unitSystem;\n\n  delete request_options.callback;\n\n  var self = this,\n      service = new google.maps.DirectionsService();\n\n  service.route(request_options, function(result, status) {\n    if (status === google.maps.DirectionsStatus.OK) {\n      for (var r in result.routes) {\n        if (result.routes.hasOwnProperty(r)) {\n          self.routes.push(result.routes[r]);\n        }\n      }\n    }\n\n    if (options.callback) {\n      options.callback(self.routes);\n    }\n  });\n};\n\nGMaps.prototype.removeRoutes = function() {\n  this.routes = [];\n};\n\nGMaps.prototype.getElevations = function(options) {\n  options = extend_object({\n    locations: [],\n    path : false,\n    samples : 256\n  }, options);\n\n  if (options.locations.length > 0) {\n    if (options.locations[0].length > 0) {\n      options.locations = array_flat(array_map([options.locations], arrayToLatLng,  false));\n    }\n  }\n\n  var callback = options.callback;\n  delete options.callback;\n\n  var service = new google.maps.ElevationService();\n\n  //location request\n  if (!options.path) {\n    delete options.path;\n    delete options.samples;\n\n    service.getElevationForLocations(options, function(result, status) {\n      if (callback && typeof(callback) === \"function\") {\n        callback(result, status);\n      }\n    });\n  //path request\n  } else {\n    var pathRequest = {\n      path : options.locations,\n      samples : options.samples\n    };\n\n    service.getElevationAlongPath(pathRequest, function(result, status) {\n     if (callback && typeof(callback) === \"function\") {\n        callback(result, status);\n      }\n    });\n  }\n};\n\nGMaps.prototype.cleanRoute = GMaps.prototype.removePolylines;\n\nGMaps.prototype.drawRoute = function(options) {\n  var self = this;\n\n  this.getRoutes({\n    origin: options.origin,\n    destination: options.destination,\n    travelMode: options.travelMode,\n    waypoints: options.waypoints,\n    unitSystem: options.unitSystem,\n    callback: function(e) {\n      if (e.length > 0) {\n        self.drawPolyline({\n          path: e[e.length - 1].overview_path,\n          strokeColor: options.strokeColor,\n          strokeOpacity: options.strokeOpacity,\n          strokeWeight: options.strokeWeight\n        });\n        \n        if (options.callback) {\n          options.callback(e[e.length - 1]);\n        }\n      }\n    }\n  });\n};\n\nGMaps.prototype.travelRoute = function(options) {\n  if (options.origin && options.destination) {\n    this.getRoutes({\n      origin: options.origin,\n      destination: options.destination,\n      travelMode: options.travelMode,\n      waypoints : options.waypoints,\n      callback: function(e) {\n        //start callback\n        if (e.length > 0 && options.start) {\n          options.start(e[e.length - 1]);\n        }\n\n        //step callback\n        if (e.length > 0 && options.step) {\n          var route = e[e.length - 1];\n          if (route.legs.length > 0) {\n            var steps = route.legs[0].steps;\n            for (var i=0, step; step=steps[i]; i++) {\n              step.step_number = i;\n              options.step(step, (route.legs[0].steps.length - 1));\n            }\n          }\n        }\n\n        //end callback\n        if (e.length > 0 && options.end) {\n           options.end(e[e.length - 1]);\n        }\n      }\n    });\n  }\n  else if (options.route) {\n    if (options.route.legs.length > 0) {\n      var steps = options.route.legs[0].steps;\n      for (var i=0, step; step=steps[i]; i++) {\n        step.step_number = i;\n        options.step(step);\n      }\n    }\n  }\n};\n\nGMaps.prototype.drawSteppedRoute = function(options) {\n  var self = this;\n  \n  if (options.origin && options.destination) {\n    this.getRoutes({\n      origin: options.origin,\n      destination: options.destination,\n      travelMode: options.travelMode,\n      waypoints : options.waypoints,\n      callback: function(e) {\n        //start callback\n        if (e.length > 0 && options.start) {\n          options.start(e[e.length - 1]);\n        }\n\n        //step callback\n        if (e.length > 0 && options.step) {\n          var route = e[e.length - 1];\n          if (route.legs.length > 0) {\n            var steps = route.legs[0].steps;\n            for (var i=0, step; step=steps[i]; i++) {\n              step.step_number = i;\n              self.drawPolyline({\n                path: step.path,\n                strokeColor: options.strokeColor,\n                strokeOpacity: options.strokeOpacity,\n                strokeWeight: options.strokeWeight\n              });\n              options.step(step, (route.legs[0].steps.length - 1));\n            }\n          }\n        }\n\n        //end callback\n        if (e.length > 0 && options.end) {\n           options.end(e[e.length - 1]);\n        }\n      }\n    });\n  }\n  else if (options.route) {\n    if (options.route.legs.length > 0) {\n      var steps = options.route.legs[0].steps;\n      for (var i=0, step; step=steps[i]; i++) {\n        step.step_number = i;\n        self.drawPolyline({\n          path: step.path,\n          strokeColor: options.strokeColor,\n          strokeOpacity: options.strokeOpacity,\n          strokeWeight: options.strokeWeight\n        });\n        options.step(step);\n      }\n    }\n  }\n};\n\nGMaps.Route = function(options) {\n  this.origin = options.origin;\n  this.destination = options.destination;\n  this.waypoints = options.waypoints;\n\n  this.map = options.map;\n  this.route = options.route;\n  this.step_count = 0;\n  this.steps = this.route.legs[0].steps;\n  this.steps_length = this.steps.length;\n\n  this.polyline = this.map.drawPolyline({\n    path: new google.maps.MVCArray(),\n    strokeColor: options.strokeColor,\n    strokeOpacity: options.strokeOpacity,\n    strokeWeight: options.strokeWeight\n  }).getPath();\n};\n\nGMaps.Route.prototype.getRoute = function(options) {\n  var self = this;\n\n  this.map.getRoutes({\n    origin : this.origin,\n    destination : this.destination,\n    travelMode : options.travelMode,\n    waypoints : this.waypoints || [],\n    callback : function() {\n      self.route = e[0];\n\n      if (options.callback) {\n        options.callback.call(self);\n      }\n    }\n  });\n};\n\nGMaps.Route.prototype.back = function() {\n  if (this.step_count > 0) {\n    this.step_count--;\n    var path = this.route.legs[0].steps[this.step_count].path;\n\n    for (var p in path){\n      if (path.hasOwnProperty(p)){\n        this.polyline.pop();\n      }\n    }\n  }\n};\n\nGMaps.Route.prototype.forward = function() {\n  if (this.step_count < this.steps_length) {\n    var path = this.route.legs[0].steps[this.step_count].path;\n\n    for (var p in path){\n      if (path.hasOwnProperty(p)){\n        this.polyline.push(path[p]);\n      }\n    }\n    this.step_count++;\n  }\n};\n\nGMaps.prototype.checkGeofence = function(lat, lng, fence) {\n  return fence.containsLatLng(new google.maps.LatLng(lat, lng));\n};\n\nGMaps.prototype.checkMarkerGeofence = function(marker, outside_callback) {\n  if (marker.fences) {\n    for (var i = 0, fence; fence = marker.fences[i]; i++) {\n      var pos = marker.getPosition();\n      if (!this.checkGeofence(pos.lat(), pos.lng(), fence)) {\n        outside_callback(marker, fence);\n      }\n    }\n  }\n};\n\nGMaps.prototype.toImage = function(options) {\n  var options = options || {},\n      static_map_options = {};\n\n  static_map_options['size'] = options['size'] || [this.el.clientWidth, this.el.clientHeight];\n  static_map_options['lat'] = this.getCenter().lat();\n  static_map_options['lng'] = this.getCenter().lng();\n\n  if (this.markers.length > 0) {\n    static_map_options['markers'] = [];\n    \n    for (var i = 0; i < this.markers.length; i++) {\n      static_map_options['markers'].push({\n        lat: this.markers[i].getPosition().lat(),\n        lng: this.markers[i].getPosition().lng()\n      });\n    }\n  }\n\n  if (this.polylines.length > 0) {\n    var polyline = this.polylines[0];\n    \n    static_map_options['polyline'] = {};\n    static_map_options['polyline']['path'] = google.maps.geometry.encoding.encodePath(polyline.getPath());\n    static_map_options['polyline']['strokeColor'] = polyline.strokeColor\n    static_map_options['polyline']['strokeOpacity'] = polyline.strokeOpacity\n    static_map_options['polyline']['strokeWeight'] = polyline.strokeWeight\n  }\n\n  return GMaps.staticMapURL(static_map_options);\n};\n\nGMaps.staticMapURL = function(options){\n  var parameters = [],\n      data,\n      static_root = 'http://maps.googleapis.com/maps/api/staticmap';\n\n  if (options.url) {\n    static_root = options.url;\n    delete options.url;\n  }\n\n  static_root += '?';\n\n  var markers = options.markers;\n  \n  delete options.markers;\n\n  if (!markers && options.marker) {\n    markers = [options.marker];\n    delete options.marker;\n  }\n\n  var polyline = options.polyline;\n  delete options.polyline;\n\n  /** Map options **/\n  if (options.center) {\n    parameters.push('center=' + options.center);\n    delete options.center;\n  }\n  else if (options.address) {\n    parameters.push('center=' + options.address);\n    delete options.address;\n  }\n  else if (options.lat) {\n    parameters.push(['center=', options.lat, ',', options.lng].join(''));\n    delete options.lat;\n    delete options.lng;\n  }\n  else if (options.visible) {\n    var visible = encodeURI(options.visible.join('|'));\n    parameters.push('visible=' + visible);\n  }\n\n  var size = options.size;\n  if (size) {\n    if (size.join) {\n      size = size.join('x');\n    }\n    delete options.size;\n  }\n  else {\n    size = '630x300';\n  }\n  parameters.push('size=' + size);\n\n  if (!options.zoom) {\n    options.zoom = 15;\n  }\n\n  var sensor = options.hasOwnProperty('sensor') ? !!options.sensor : true;\n  delete options.sensor;\n  parameters.push('sensor=' + sensor);\n\n  for (var param in options) {\n    if (options.hasOwnProperty(param)) {\n      parameters.push(param + '=' + options[param]);\n    }\n  }\n\n  /** Markers **/\n  if (markers) {\n    var marker, loc;\n\n    for (var i=0; data=markers[i]; i++) {\n      marker = [];\n\n      if (data.size && data.size !== 'normal') {\n        marker.push('size:' + data.size);\n      }\n      else if (data.icon) {\n        marker.push('icon:' + encodeURI(data.icon));\n      }\n\n      if (data.color) {\n        marker.push('color:' + data.color.replace('#', '0x'));\n      }\n\n      if (data.label) {\n        marker.push('label:' + data.label[0].toUpperCase());\n      }\n\n      loc = (data.address ? data.address : data.lat + ',' + data.lng);\n\n      if (marker.length || i === 0) {\n        marker.push(loc);\n        marker = marker.join('|');\n        parameters.push('markers=' + encodeURI(marker));\n      }\n      // New marker without styles\n      else {\n        marker = parameters.pop() + encodeURI('|' + loc);\n        parameters.push(marker);\n      }\n    }\n  }\n\n  /** Polylines **/\n  function parseColor(color, opacity) {\n    if (color[0] === '#'){\n      color = color.replace('#', '0x');\n\n      if (opacity) {\n        opacity = parseFloat(opacity);\n        opacity = Math.min(1, Math.max(opacity, 0));\n        if (opacity === 0) {\n          return '0x00000000';\n        }\n        opacity = (opacity * 255).toString(16);\n        if (opacity.length === 1) {\n          opacity += opacity;\n        }\n\n        color = color.slice(0,8) + opacity;\n      }\n    }\n    return color;\n  }\n\n  if (polyline) {\n    data = polyline;\n    polyline = [];\n\n    if (data.strokeWeight) {\n      polyline.push('weight:' + parseInt(data.strokeWeight, 10));\n    }\n\n    if (data.strokeColor) {\n      var color = parseColor(data.strokeColor, data.strokeOpacity);\n      polyline.push('color:' + color);\n    }\n\n    if (data.fillColor) {\n      var fillcolor = parseColor(data.fillColor, data.fillOpacity);\n      polyline.push('fillcolor:' + fillcolor);\n    }\n\n    var path = data.path;\n    if (path.join) {\n      for (var j=0, pos; pos=path[j]; j++) {\n        polyline.push(pos.join(','));\n      }\n    }\n    else {\n      polyline.push('enc:' + path);\n    }\n\n    polyline = polyline.join('|');\n    parameters.push('path=' + encodeURI(polyline));\n  }\n\n  parameters = parameters.join('&');\n  return static_root + parameters;\n};\n\nGMaps.prototype.addMapType = function(mapTypeId, options) {\n  if (options.hasOwnProperty(\"getTileUrl\") && typeof(options[\"getTileUrl\"]) == \"function\") {\n    options.tileSize = options.tileSize || new google.maps.Size(256, 256);\n\n    var mapType = new google.maps.ImageMapType(options);\n\n    this.map.mapTypes.set(mapTypeId, mapType);\n  }\n  else {\n    throw \"'getTileUrl' function required.\";\n  }\n};\n\nGMaps.prototype.addOverlayMapType = function(options) {\n  if (options.hasOwnProperty(\"getTile\") && typeof(options[\"getTile\"]) == \"function\") {\n    var overlayMapTypeIndex = options.index;\n\n    delete options.index;\n\n    this.map.overlayMapTypes.insertAt(overlayMapTypeIndex, options);\n  }\n  else {\n    throw \"'getTile' function required.\";\n  }\n};\n\nGMaps.prototype.removeOverlayMapType = function(overlayMapTypeIndex) {\n  this.map.overlayMapTypes.removeAt(overlayMapTypeIndex);\n};\n\nGMaps.prototype.addStyle = function(options) {\n  var styledMapType = new google.maps.StyledMapType(options.styles, options.styledMapName);\n\n  this.map.mapTypes.set(options.mapTypeId, styledMapType);\n};\n\nGMaps.prototype.setStyle = function(mapTypeId) {\n  this.map.setMapTypeId(mapTypeId);\n};\n\nGMaps.prototype.createPanorama = function(streetview_options) {\n  if (!streetview_options.hasOwnProperty('lat') || !streetview_options.hasOwnProperty('lng')) {\n    streetview_options.lat = this.getCenter().lat();\n    streetview_options.lng = this.getCenter().lng();\n  }\n\n  this.panorama = GMaps.createPanorama(streetview_options);\n\n  this.map.setStreetView(this.panorama);\n\n  return this.panorama;\n};\n\nGMaps.createPanorama = function(options) {\n  var el = getElementById(options.el, options.context);\n\n  options.position = new google.maps.LatLng(options.lat, options.lng);\n\n  delete options.el;\n  delete options.context;\n  delete options.lat;\n  delete options.lng;\n\n  var streetview_events = ['closeclick', 'links_changed', 'pano_changed', 'position_changed', 'pov_changed', 'resize', 'visible_changed'],\n      streetview_options = extend_object({visible : true}, options);\n\n  for (var i = 0; i < streetview_events.length; i++) {\n    delete streetview_options[streetview_events[i]];\n  }\n\n  var panorama = new google.maps.StreetViewPanorama(el, streetview_options);\n\n  for (var i = 0; i < streetview_events.length; i++) {\n    (function(object, name) {\n      if (options[name]) {\n        google.maps.event.addListener(object, name, function(){\n          options[name].apply(this);\n        });\n      }\n    })(panorama, streetview_events[i]);\n  }\n\n  return panorama;\n};\n\nGMaps.prototype.on = function(event_name, handler) {\n  return GMaps.on(event_name, this, handler);\n};\n\nGMaps.prototype.off = function(event_name) {\n  GMaps.off(event_name, this);\n};\n\nGMaps.custom_events = ['marker_added', 'marker_removed', 'polyline_added', 'polyline_removed', 'polygon_added', 'polygon_removed', 'geolocated', 'geolocation_failed'];\n\nGMaps.on = function(event_name, object, handler) {\n  if (GMaps.custom_events.indexOf(event_name) == -1) {\n    return google.maps.event.addListener(object, event_name, handler);\n  }\n  else {\n    var registered_event = {\n      handler : handler,\n      eventName : event_name\n    };\n\n    object.registered_events[event_name] = object.registered_events[event_name] || [];\n    object.registered_events[event_name].push(registered_event);\n\n    return registered_event;\n  }\n};\n\nGMaps.off = function(event_name, object) {\n  if (GMaps.custom_events.indexOf(event_name) == -1) {\n    google.maps.event.clearListeners(object, event_name);\n  }\n  else {\n    object.registered_events[event_name] = [];\n  }\n};\n\nGMaps.fire = function(event_name, object, scope) {\n  if (GMaps.custom_events.indexOf(event_name) == -1) {\n    google.maps.event.trigger(object, event_name, Array.prototype.slice.apply(arguments).slice(2));\n  }\n  else {\n    if(event_name in scope.registered_events) {\n      var firing_events = scope.registered_events[event_name];\n\n      for(var i = 0; i < firing_events.length; i++) {\n        (function(handler, scope, object) {\n          handler.apply(scope, [object]);\n        })(firing_events[i]['handler'], scope, object);\n      }\n    }\n  }\n};\n\nGMaps.geolocate = function(options) {\n  var complete_callback = options.always || options.complete;\n\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function(position) {\n      options.success(position);\n\n      if (complete_callback) {\n        complete_callback();\n      }\n    }, function(error) {\n      options.error(error);\n\n      if (complete_callback) {\n        complete_callback();\n      }\n    }, options.options);\n  }\n  else {\n    options.not_supported();\n\n    if (complete_callback) {\n      complete_callback();\n    }\n  }\n};\n\nGMaps.geocode = function(options) {\n  this.geocoder = new google.maps.Geocoder();\n  var callback = options.callback;\n  if (options.hasOwnProperty('lat') && options.hasOwnProperty('lng')) {\n    options.latLng = new google.maps.LatLng(options.lat, options.lng);\n  }\n\n  delete options.lat;\n  delete options.lng;\n  delete options.callback;\n  \n  this.geocoder.geocode(options, function(results, status) {\n    callback(results, status);\n  });\n};\n\n//==========================\n// Polygon containsLatLng\n// https://github.com/tparkin/Google-Maps-Point-in-Polygon\n// Poygon getBounds extension - google-maps-extensions\n// http://code.google.com/p/google-maps-extensions/source/browse/google.maps.Polygon.getBounds.js\nif (!google.maps.Polygon.prototype.getBounds) {\n  google.maps.Polygon.prototype.getBounds = function(latLng) {\n    var bounds = new google.maps.LatLngBounds();\n    var paths = this.getPaths();\n    var path;\n\n    for (var p = 0; p < paths.getLength(); p++) {\n      path = paths.getAt(p);\n      for (var i = 0; i < path.getLength(); i++) {\n        bounds.extend(path.getAt(i));\n      }\n    }\n\n    return bounds;\n  };\n}\n\nif (!google.maps.Polygon.prototype.containsLatLng) {\n  // Polygon containsLatLng - method to determine if a latLng is within a polygon\n  google.maps.Polygon.prototype.containsLatLng = function(latLng) {\n    // Exclude points outside of bounds as there is no way they are in the poly\n    var bounds = this.getBounds();\n\n    if (bounds !== null && !bounds.contains(latLng)) {\n      return false;\n    }\n\n    // Raycast point in polygon method\n    var inPoly = false;\n\n    var numPaths = this.getPaths().getLength();\n    for (var p = 0; p < numPaths; p++) {\n      var path = this.getPaths().getAt(p);\n      var numPoints = path.getLength();\n      var j = numPoints - 1;\n\n      for (var i = 0; i < numPoints; i++) {\n        var vertex1 = path.getAt(i);\n        var vertex2 = path.getAt(j);\n\n        if (vertex1.lng() < latLng.lng() && vertex2.lng() >= latLng.lng() || vertex2.lng() < latLng.lng() && vertex1.lng() >= latLng.lng()) {\n          if (vertex1.lat() + (latLng.lng() - vertex1.lng()) / (vertex2.lng() - vertex1.lng()) * (vertex2.lat() - vertex1.lat()) < latLng.lat()) {\n            inPoly = !inPoly;\n          }\n        }\n\n        j = i;\n      }\n    }\n\n    return inPoly;\n  };\n}\n\ngoogle.maps.LatLngBounds.prototype.containsLatLng = function(latLng) {\n  return this.contains(latLng);\n};\n\ngoogle.maps.Marker.prototype.setFences = function(fences) {\n  this.fences = fences;\n};\n\ngoogle.maps.Marker.prototype.addFence = function(fence) {\n  this.fences.push(fence);\n};\n\ngoogle.maps.Marker.prototype.getId = function() {\n  return this['__gm_id'];\n};\n\n//==========================\n// Array indexOf\n// https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\n      \"use strict\";\n      if (this == null) {\n          throw new TypeError();\n      }\n      var t = Object(this);\n      var len = t.length >>> 0;\n      if (len === 0) {\n          return -1;\n      }\n      var n = 0;\n      if (arguments.length > 1) {\n          n = Number(arguments[1]);\n          if (n != n) { // shortcut for verifying if it's NaN\n              n = 0;\n          } else if (n != 0 && n != Infinity && n != -Infinity) {\n              n = (n > 0 || -1) * Math.floor(Math.abs(n));\n          }\n      }\n      if (n >= len) {\n          return -1;\n      }\n      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n      for (; k < len; k++) {\n          if (k in t && t[k] === searchElement) {\n              return k;\n          }\n      }\n      return -1;\n  }\n}"]],"start1":0,"start2":0,"length1":0,"length2":53027}]],"length":53027}
{"contributors":[],"silentsave":true,"ts":1375735504674,"patch":[[{"diffs":[[0,".length\n        "],[-1,"  "],[0,"i;\n\n      for (i"]],"start1":7396,"start2":7396,"length1":34,"length2":32}]],"length":53025,"saved":false}
{"ts":1375735504985,"patch":[[{"diffs":[[0,".length\n"],[-1,"    "],[0,"    i;\n\n"]],"start1":7396,"start2":7396,"length1":20,"length2":16}]],"length":53021,"saved":false}
{"ts":1375735506060,"patch":[[{"diffs":[[0,".length\n"],[-1,"    "],[0,"i;\n\n    "]],"start1":7396,"start2":7396,"length1":20,"length2":16}]],"length":53017,"saved":false}
{"ts":1375735506418,"patch":[[{"diffs":[[0,"s.length"],[-1,"\n"],[0,"i;\n\n    "]],"start1":7395,"start2":7395,"length1":17,"length2":16}]],"length":53016,"saved":false}
{"ts":1375735510541,"patch":[[{"diffs":[[0,"s.length"],[1," "],[0,"i;\n\n    "]],"start1":7395,"start2":7395,"length1":16,"length2":17}]],"length":53017,"saved":false}
{"ts":1375735543722,"patch":[[{"diffs":[[0,"s.length"],[-1," "],[0,"i;\n\n    "]],"start1":7395,"start2":7395,"length1":17,"length2":16}]],"length":53016,"saved":false}
{"ts":1375735547141,"patch":[[{"diffs":[[0,"s.length"],[1,"\n          "],[0,"i;\n\n    "]],"start1":7395,"start2":7395,"length1":16,"length2":27}]],"length":53027,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376702461728,"patch":[[{"diffs":[[0,";\n  "],[-1,"\n  this.map.controls[position].push(control);"],[1,"if (options.prams !== null) {options.prama.controls.push(control);}\n  \n  this.map.controls[position].push(control);\n  if (options.prams !== null) {options.pano.map.controls[position].push(control);}"],[0,"\n\n  "]],"start1":13876,"start2":13876,"length1":53,"length2":206}]],"length":53180,"saved":false}
{"ts":1376702821010,"patch":[[{"diffs":[[0,"l);\n"],[-1,"  if (options.prams !== null) {options.prama.controls.push(control);}\n"],[0,"  \n "]],"start1":13874,"start2":13874,"length1":78,"length2":8},{"diffs":[[0," null) {"],[1,"this."],[0,"options."]],"start1":13949,"start2":13949,"length1":16,"length2":21},{"diffs":[[0,"ns.p"],[-1,"ano.map"],[1,"rams"],[0,".con"]],"start1":13967,"start2":13967,"length1":15,"length2":12}]],"length":53112,"saved":false}
{"ts":1376703065738,"patch":[[{"diffs":[[0," null) {"],[-1,"this."],[0,"options."]],"start1":13949,"start2":13949,"length1":21,"length2":16}]],"length":53107,"saved":false}
{"ts":1376703611081,"patch":[[{"diffs":[[0,"ms.controls["],[-1,"position"],[1,"google.maps.ControlPosition.TOP_RIGHT"],[0,"].push(contr"]],"start1":13968,"start2":13968,"length1":32,"length2":61}]],"length":53136,"saved":false}
{"ts":1376703980445,"patch":[[{"diffs":[[0,"ols["],[-1,"google.maps.ControlPosition.TOP_RIGHT"],[1,"position"],[0,"].pu"]],"start1":13976,"start2":13976,"length1":45,"length2":16}]],"length":53107,"saved":false}
{"ts":1376704277596,"patch":[[{"diffs":[[0,"ons.pram"],[-1,"s"],[1,"a"],[0," !== nul"]],"start1":13936,"start2":13936,"length1":17,"length2":17},{"diffs":[[0,"ons.pram"],[-1,"s"],[1,"a"],[0,".control"]],"start1":13961,"start2":13961,"length1":17,"length2":17}]],"length":53107,"saved":false}
{"ts":1376704411587,"patch":[[{"diffs":[[0,";\n  "],[-1,"if (options.prama !== null) {"],[0,"opti"]],"start1":13924,"start2":13924,"length1":37,"length2":8},{"diffs":[[0,"ontrol);"],[-1,"}"],[0,"\n\n  retu"]],"start1":13967,"start2":13967,"length1":17,"length2":16}]],"length":53077,"saved":false}
{"ts":1376705275922,"patch":[[{"diffs":[[0,"ase()];\n"],[1,"  var prama = options.prama;\n  "],[0,"\n  delet"]],"start1":13765,"start2":13765,"length1":16,"length2":47},{"diffs":[[0,"osition;"],[1,"\n  delete options.prama;"],[0,"\n\n  var "]],"start1":13823,"start2":13823,"length1":16,"length2":40},{"diffs":[[0,"rol);\n  "],[-1,"options."],[0,"prama.co"]],"start1":13975,"start2":13975,"length1":24,"length2":16}]],"length":53124,"saved":false}
{"ts":1376705426753,"patch":[[{"diffs":[[0,"prama = "],[-1,"options.prama"],[1,"this.map.getStreetView()"],[0,";\n  \n  d"]],"start1":13779,"start2":13779,"length1":29,"length2":40},{"diffs":[[0,"ion;"],[-1,"\n  delete options.prama;"],[0,"\n\n  "]],"start1":13838,"start2":13838,"length1":32,"length2":8}]],"length":53111,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376756117847,"patch":[[{"diffs":[[0,")];\n"],[-1,"  var prama = this.map.getStreetView();\n"],[0,"  \n "]],"start1":13769,"start2":13769,"length1":48,"length2":8},{"diffs":[[0,";\n  "],[-1,"prama"],[1,"this.pano"],[0,".con"]],"start1":13926,"start2":13926,"length1":13,"length2":17}]],"length":53075,"saved":false}
{"ts":1376756267421,"patch":[[{"diffs":[[0,"ol);"],[-1,"\n  this.pano.controls[position].push(control);"],[0,"\n\n  "]],"start1":13923,"start2":13923,"length1":54,"length2":8}]],"length":53029,"saved":false}
{"ts":1376756327791,"patch":[[{"diffs":[[0,"ontrol);"],[1,"\n  pano.controls[position].push(control);"],[0,"\n\n  retu"]],"start1":13919,"start2":13919,"length1":16,"length2":57}]],"length":53070,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376759713042,"patch":[[{"diffs":[[0,"ase()];\n"],[1,"  var prama = options.prama;\n"],[0,"  \n  del"]],"start1":13765,"start2":13765,"length1":16,"length2":45},{"diffs":[[0,"sition;\n"],[1,"  delete options.prama;\n  "],[0,"\n  var c"]],"start1":13824,"start2":13824,"length1":16,"length2":42},{"diffs":[[0,"rol);\n  "],[-1,"pano"],[1,"this.prama"],[0,".control"]],"start1":13977,"start2":13977,"length1":20,"length2":26}]],"length":53131,"saved":false}
{"ts":1376759836904,"patch":[[{"diffs":[[0,"rCase()];\n  "],[1,"if (typeof options.prama !== 'undefined') {"],[0,"var prama = "]],"start1":13763,"start2":13763,"length1":24,"length2":67},{"diffs":[[0,"tions.prama;"],[1,"}"],[0,"\n  \n  delete"]],"start1":13832,"start2":13832,"length1":24,"length2":25},{"diffs":[[0,"position;\n  "],[1,"if (typeof options.prama !== 'undefined') {"],[0,"delete optio"]],"start1":13866,"start2":13866,"length1":24,"length2":67},{"diffs":[[0,"s.prama;"],[1,"}"],[0,"\n  \n  va"]],"start1":13934,"start2":13934,"length1":16,"length2":17},{"diffs":[[0,"control);\n  "],[1,"if (typeof options.prama !== 'undefined') {"],[0,"this.prama.c"]],"start1":14061,"start2":14061,"length1":24,"length2":67},{"diffs":[[0,"ontrol);"],[1,"}"],[0,"\n\n  retu"]],"start1":14152,"start2":14152,"length1":16,"length2":17}]],"length":53263,"saved":false}
{"ts":1376760141744,"patch":[[{"diffs":[[0,"') {var "],[-1,"p"],[1,"aP"],[0,"rama = o"]],"start1":13814,"start2":13814,"length1":17,"length2":18},{"diffs":[[0," if (typeof "],[-1,"options.p"],[1,"aP"],[0,"rama !== 'un"]],"start1":14073,"start2":14073,"length1":33,"length2":26}]],"length":53257,"saved":false}
{"ts":1376760236364,"patch":[[{"diffs":[[0,") {this."],[-1,"p"],[1,"aP"],[0,"rama.con"]],"start1":14107,"start2":14107,"length1":17,"length2":18}]],"length":53258,"saved":false}
{"ts":1376760506046,"patch":[[{"diffs":[[0,"rn control;\n};\n\n"],[1,"// add useSV: true parameter to put control in street view too\n"],[0,"GMaps.prototype."]],"start1":13630,"start2":13630,"length1":32,"length2":95},{"diffs":[[0,";\n  "],[-1,"if (typeof options.prama !== 'undefined') {var aPrama = options.prama;}\n  \n  delete options.position;\n  if (typeof options.prama !== 'undefined') {delete options.prama;}"],[1,"var aPano = this.map.getStreetView();\n  \n  delete options.position;"],[0,"\n  \n"]],"start1":13834,"start2":13834,"length1":177,"length2":75},{"diffs":[[0,"if ("],[-1,"typeof aPrama !== 'undefined'"],[1,"useSV === true"],[0,") {t"]],"start1":14035,"start2":14035,"length1":37,"length2":22},{"diffs":[[0,"{this.aP"],[-1,"rama"],[1,"ano"],[0,".control"]],"start1":14055,"start2":14055,"length1":20,"length2":19}]],"length":53203,"saved":false}
{"ts":1376760692017,"patch":[[{"diffs":[[0,"rCase()];\n  "],[1,"if (useSV === true) {"],[0,"var aPano = "]],"start1":13826,"start2":13826,"length1":24,"length2":45},{"diffs":[[0,"tView();"],[1,"}"],[0,"\n  \n  de"]],"start1":13888,"start2":13888,"length1":16,"length2":17},{"diffs":[[0,"sition;\n"],[1,"  delete options.useSV;\n"],[0,"  \n  var"]],"start1":13920,"start2":13920,"length1":16,"length2":40}]],"length":53249,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376760808975,"patch":[[{"diffs":[[0,"rCase()];\n  if ("],[1,"options."],[0,"useSV === true) "]],"start1":13826,"start2":13826,"length1":32,"length2":40},{"diffs":[[0,";\n  if ("],[-1,"useSV === true"],[1,"typeof aPano !== 'undefined'"],[0,") {this."]],"start1":14085,"start2":14085,"length1":30,"length2":44}]],"length":53271,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376760840703,"patch":[[{"diffs":[[0,"ined') {"],[-1,"this."],[0,"aPano.co"]],"start1":14116,"start2":14116,"length1":21,"length2":16}]],"length":53266,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376761337173,"patch":[[{"diffs":[[0,"\n// "],[-1,"add useSV: true parameter"],[1,"lou king added this ...\n// new parameter useSV: true"],[0," to "]],"start1":13645,"start2":13645,"length1":33,"length2":60},{"diffs":[[0,"view"],[-1," too"],[0,"\nGMa"]],"start1":13727,"start2":13727,"length1":12,"length2":8},{"diffs":[[0,"ase()];\n"],[1,"  var aPano;\n"],[0,"  if (op"]],"start1":13851,"start2":13851,"length1":16,"length2":29},{"diffs":[[0," true) {"],[-1,"var "],[0,"aPano = "]],"start1":13895,"start2":13895,"length1":20,"length2":16}]],"length":53298,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376764954649,"patch":[[{"diffs":[[0,"u king a"],[-1,"d"],[1,"men"],[0,"ded this"]],"start1":13651,"start2":13651,"length1":17,"length2":19},{"diffs":[[0,"ase()];\n"],[1,"  // lou king add ...\n"],[0,"  var aP"]],"start1":13853,"start2":13853,"length1":16,"length2":38},{"diffs":[[0,"iew();}\n"],[1,"  delete options.useSV;\n  // ... end of lou king add\n"],[0,"  \n  del"]],"start1":13954,"start2":13954,"length1":16,"length2":69},{"diffs":[[0,"on;\n"],[-1,"  delete options.useSV;\n"],[0,"  \n "]],"start1":14041,"start2":14041,"length1":32,"length2":8},{"diffs":[[0,"trol);\n  \n  "],[1,"// lou king add tests ...\n  if (typeof aPano === 'undefined') {"],[0,"this.map.con"]],"start1":14117,"start2":14117,"length1":24,"length2":87},{"diffs":[[0,"ontrol);"],[1,"}"],[0,"\n  if (t"]],"start1":14226,"start2":14226,"length1":16,"length2":17},{"diffs":[[0,"trol);}\n"],[1,"  // ... end of lou king add\n  "],[0,"\n  retur"]],"start1":14306,"start2":14306,"length1":16,"length2":47}]],"length":53446,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376770905528,"patch":[[{"diffs":[[0,"eet view"],[1," INSTEAD of map view"],[0,"\nGMaps.p"]],"start1":13725,"start2":13725,"length1":16,"length2":36},{"diffs":[[0,"= th"],[-1,"is.map.getStreetView()"],[1,"ePano"],[0,";}\n "]],"start1":13953,"start2":13953,"length1":30,"length2":13}]],"length":53449,"saved":false}
{"ts":1376771381133,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"// lou king amended this ...\n// new parameter useSV: true to put control in street view INSTEAD of map view\n"],[0,"GMap"]],"start1":13642,"start2":13642,"length1":116,"length2":8},{"diffs":[[0,"function(options"],[1,", thePano"],[0,") {\n  var positi"]],"start1":13675,"start2":13675,"length1":32,"length2":41},{"diffs":[[0,")];\n"],[-1,"  // lou king add ...\n  var aPano;\n  if (options.useSV === true) {aPano = thePano;}\n  delete options.useSV;\n  // ... end of lou king add\n  "],[0,"\n  d"]],"start1":13778,"start2":13778,"length1":147,"length2":8},{"diffs":[[0," if (typeof "],[-1,"a"],[1,"the"],[0,"Pano === 'un"]],"start1":13921,"start2":13921,"length1":25,"length2":27},{"diffs":[[0,"(typeof "],[-1,"a"],[1,"the"],[0,"Pano !=="]],"start1":14008,"start2":14008,"length1":17,"length2":19},{"diffs":[[0,"ined') {"],[-1,"a"],[1,"the"],[0,"Pano.con"]],"start1":14034,"start2":14034,"length1":17,"length2":19}]],"length":53217,"saved":false}
{"contributors":[],"silentsave":false,"ts":1377027101784,"patch":[[{"diffs":[[0,"rn control;\n};\n\n"],[1,"// lou king add thePano arg ...\n"],[0,"GMaps.prototype."]],"start1":13630,"start2":13630,"length1":32,"length2":64}]],"length":53249,"saved":false}
